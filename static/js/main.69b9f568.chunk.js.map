{"version":3,"sources":["utils/index.js","apiCalls/playersApi.js","features/players/playersSlice.js","style.js","features/players/PlayerCard.js","features/scoreboard/scoreboardSlice.js","components/Button.js","features/players/PlayersRadioSelection.js","components/CardUlListDisplay.js","features/players/PlayersContainer.js","constants/index.js","features/scoreboard/ScoreboardDetailsContainer.js","components/Header.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["handleApiErrors","response","ok","console","log","Error","statusText","getRandomPlayers","arr","n","length","result","len","taken","RangeError","x","Math","floor","random","playersAPI","playersSlice","createSlice","name","initialState","playersList","loading","error","reducers","requestPlayers","state","receivePlayers","action","players","payload","actions","reducer","fetchPlayers","dispatch","fetch","then","res","json","data","GlobalStyle","createGlobalStyle","normalize","StyledCard","styled","div","props","showTheBest","chosen","StyledImg","img","PlayerName","PlayerCard","player","showFppg","handleCardClick","maxFppgId","useState","setChosen","useEffect","playerName","first_name","last_name","hasHighestFppg","id","playerFppg","fppg","toFixed","data-testid","onClick","src","images","default","url","alt","scoreboardDetailsSlice","score","attempts","isWinner","incrementScore","incrementAttempts","setWinner","resetGame","Button","button","Radios","RadioInput","input","RadioLabel","label","PlayersRadioSelection","numOfPlayers","setNumOfPlayers","type","value","checked","onChange","e","target","CardUlListDisplay","ul","PlayersContainer","useDispatch","useSelector","randomPlayers","setRandomPlayers","setShowFppg","hasChosenTheBest","setHasChosenTheBest","handleRandomPlayers","getMaxFppgId","reduce","max","isTheBest","handleChosenTheBest","style","minHeight","fontWeight","padding","fontSize","map","key","color","WINNING_SCORE","ScoreboardDetailsContainer","scoreboard","Header","Wrapper","App","React","Boolean","window","location","hostname","match","rootReducer","combineReducers","playersReducer","scoreboardReducer","store","configureStore","preloadedState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69b9f568.chunk.js","sourcesContent":["export function handleApiErrors(response) {\r\n\tif (!response.ok) {\r\n\t\tconsole.log(response);\r\n\t\tthrow Error(response.statusText);\r\n\t}\r\n\treturn response;\r\n}\r\n\r\nexport function getRandomPlayers(arr, n) {\r\n\tif (!arr.length) {\r\n\t\treturn [];\r\n\t}\r\n\tlet result = [];\r\n\tlet len = arr.length;\r\n\tlet taken = [];\r\n\tif (n > len) throw new RangeError('getRandom: more elements taken than available');\r\n\twhile (n--) {\r\n\t\tconst x = Math.floor(Math.random() * len);\r\n\t\tresult[n] = arr[x in taken ? taken[x] : x];\r\n\t\ttaken[x] = --len in taken ? taken[len] : len;\r\n\t}\r\n\treturn result;\r\n}\r\n","import {handleApiErrors} from '../utils';\r\n\r\nconst playersAPI = 'https://gist.githubusercontent.com/liamjdouglas/bb40ee8721f1a9313c22c6ea0851a105/raw/6b6fc89d55ebe4d9b05c1469349af33651d7e7f1/Player.json'\r\n\r\nexport function getPlayers() {\r\n  return fetch(playersAPI)\r\n    .then(handleApiErrors)\r\n    .then(res => res.json())\r\n    .then(data => data.players)\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getPlayers } from '../../apiCalls/playersApi';\r\n\r\n\r\n\r\nconst playersSlice = createSlice({\r\n  name: 'players',\r\n  initialState: {\r\n    playersList: [],\r\n    loading: false,\r\n    error: false\r\n  },\r\n  reducers: {\r\n    requestPlayers(state) { state.loading = true },\r\n    receivePlayers(state, action) {\r\n      const players = action.payload;\r\n      state.playersList = players;\r\n      state.loading = false;\r\n    }\r\n  }\r\n});\r\n\r\nconst {actions, reducer} = playersSlice;\r\n\r\nexport function fetchPlayers() {\r\n  return function(dispatch) {\r\n    dispatch(requestPlayers());\r\n    return getPlayers().then(data => dispatch(receivePlayers(data)));\r\n  }\r\n}\r\n\r\nexport const {requestPlayers, receivePlayers} = actions;\r\nexport default reducer;","// styles/index.js\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'styled-normalize';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  // You can continue writing global styles here\r\n  body {\r\n    text-align: center;\r\n    background-color: #152A47;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n    /* box-sizing: border-box; */\r\n  }\r\n  `;\r\n\r\n// colors\r\nexport const redBg = 'linear-gradient(45deg, #e71b1b, #bb020296)';\r\nexport const cardBg = 'linear-gradient(45deg, black, transparent)';\r\nexport const greenBg = 'linear-gradient(45deg, #25e058, #117101ab)';\r\n","import React, { useState, useEffect } from 'react';\r\nimport { redBg, greenBg, cardBg } from '../../style';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCard = styled.div`\r\n\tborder-radius: 5px;\r\n\tbox-shadow: 2px 2px 4px skyblue;\r\n\tpadding-top: 10px;\r\n\tcursor: pointer;\r\n\tbackground: ${props => (props.showTheBest && greenBg) || (!props.showTheBest && props.chosen && redBg) || cardBg};\r\n\ttransform: ${props => props.chosen && 'scale(1.07)'};\r\n\toverflow: hidden;\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n\tposition: relative;\r\n\tbottom: -4px;\r\n\twidth: 100%;\r\n`;\r\n\r\nconst PlayerName = styled.div`\r\n\twhite-space: nowrap;\r\n\toverflow: hidden;\r\n\ttext-overflow: ellipsis;\r\n\tfont-size: 0.85em;\r\n`;\r\n\r\nfunction PlayerCard({ player, showFppg, handleCardClick, maxFppgId }) {\r\n\tconst [chosen, setChosen] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t!showFppg && setChosen(false);\r\n\t}, [showFppg]);\r\n\r\n\tconst playerName = `${player.first_name} ${player.last_name}`;\r\n\tconst hasHighestFppg = player.id === maxFppgId();\r\n\tconst playerFppg = player.fppg?.toFixed(2) || 0;\r\n\r\n\treturn (\r\n\t\t<StyledCard\r\n\t\t\tdata-testid='player-card'\r\n\t\t\tchosen={chosen}\r\n\t\t\tshowTheBest={hasHighestFppg && showFppg}\r\n\t\t\tonClick={() => {\r\n\t\t\t\thandleCardClick(hasHighestFppg);\r\n\t\t\t\tsetChosen(true);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<PlayerName>{playerName}</PlayerName>\r\n\t\t\t<div>FPPG: {showFppg ? playerFppg : '??'}</div>\r\n\t\t\t<StyledImg src={player.images.default.url} alt={playerName} />\r\n\t\t</StyledCard>\r\n\t);\r\n}\r\n\r\nexport default PlayerCard;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  score: 0,\r\n  attempts: 0,\r\n  isWinner: false\r\n}\r\n\r\nconst scoreboardDetailsSlice = createSlice({\r\n  name: 'scoreboard',\r\n  initialState: initialState,\r\n  reducers: {\r\n    // incrementScore(state) {return state.score + 1},\r\n    incrementScore(state) { state.score++ },\r\n    incrementAttempts(state) { state.attempts++ },\r\n    setWinner(state) { state.isWinner = true },\r\n    resetGame(state) {\r\n      state.score = 0\r\n      state.attempts = 0\r\n      state.isWinner = false\r\n    }\r\n  }\r\n})\r\n\r\nconst { actions, reducer } = scoreboardDetailsSlice;\r\n\r\nexport const { incrementScore, incrementAttempts, resetGame, setWinner } = actions;\r\n\r\nexport default reducer;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n\tborder: none;\r\n\tborder-radius: 5px;\r\n\tbackground: #f0f3f8;\r\n\tcolor: #2a76b2;\r\n\tpadding: 7px 14px;\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Radios = styled.div`\r\n\tdisplay: flex;\r\n\twidth: 200px;\r\n\tjustify-content: space-around;\r\n\tmargin: 0 auto;\r\n`;\r\n\r\nconst RadioInput = styled.input`\r\n\tmargin-right: 5px;\r\n`;\r\nconst RadioLabel = styled.label`\r\n\tcursor: pointer;\r\n`;\r\n\r\nfunction PlayersRadioSelection(props) {\r\n\tconst { numOfPlayers, setNumOfPlayers } = props;\r\n\r\n\treturn (\r\n\t\t<Radios>\r\n\t\t\t<RadioLabel>\r\n\t\t\t\t<RadioInput\r\n\t\t\t\t\ttype='radio'\r\n\t\t\t\t\tname='players-number'\r\n\t\t\t\t\tvalue='2'\r\n\t\t\t\t\tchecked={numOfPlayers === '2'}\r\n\t\t\t\t\tonChange={e => setNumOfPlayers(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t2\r\n\t\t\t</RadioLabel>\r\n\t\t\t<RadioLabel>\r\n\t\t\t\t<RadioInput\r\n\t\t\t\t\ttype='radio'\r\n\t\t\t\t\tname='players-number'\r\n\t\t\t\t\tvalue='3'\r\n\t\t\t\t\tchecked={numOfPlayers === '3'}\r\n\t\t\t\t\tonChange={e => setNumOfPlayers(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t3\r\n\t\t\t</RadioLabel>\r\n\t\t\t<RadioLabel data-testid='radio3'>\r\n\t\t\t\t<RadioInput\r\n\t\t\t\t\ttype='radio'\r\n\t\t\t\t\tname='players-number'\r\n\t\t\t\t\tvalue='5'\r\n\t\t\t\t\tchecked={numOfPlayers === '5'}\r\n\t\t\t\t\tonChange={e => setNumOfPlayers(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t5\r\n\t\t\t</RadioLabel>\r\n\t\t</Radios>\r\n\t);\r\n}\r\n\r\nexport default PlayersRadioSelection;\r\n","import styled from 'styled-components';\r\n\r\nconst CardUlListDisplay = styled.ul`\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\tflex-flow: wrap;\r\n\tpadding: 0;\r\n\tmargin: 10px;\r\n\tjustify-content: center;\r\n\t& li {\r\n\t\tlist-style: none;\r\n\t\tmargin: 7px;\r\n\t\tmax-width: 220px;\r\n\t\tflex: 1 0 45%;\r\n\t}\r\n`;\r\n\r\nexport default CardUlListDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PlayerCard from './PlayerCard';\r\nimport { incrementScore, incrementAttempts } from '../scoreboard/scoreboardSlice';\r\nimport { getRandomPlayers } from '../../utils';\r\nimport Button from '../../components/Button';\r\nimport PlayersRadioSelection from './PlayersRadioSelection';\r\nimport CardUlListDisplay from '../../components/CardUlListDisplay';\r\n\r\nfunction PlayersContainer() {\r\n\tconst dispatch = useDispatch();\r\n\tconst { playersList } = useSelector(state => state.players);\r\n\t// const { score, resets } = useSelector(state => state.scoreboard);\r\n\tconst [randomPlayers, setRandomPlayers] = useState([]);\r\n\tconst [numOfPlayers, setNumOfPlayers] = useState('2');\r\n\tconst [showFppg, setShowFppg] = useState(false);\r\n\tconst [hasChosenTheBest, setHasChosenTheBest] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\thandleRandomPlayers();\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [numOfPlayers, playersList]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShowFppg(false);\r\n\t\tsetHasChosenTheBest(false);\r\n\t}, [randomPlayers]);\r\n\r\n\tfunction handleRandomPlayers() {\r\n\t\tsetShowFppg(false);\r\n\t\tsetHasChosenTheBest(false);\r\n\t\tsetRandomPlayers(getRandomPlayers(playersList, numOfPlayers));\r\n\t}\r\n\r\n\tfunction getMaxFppgId() {\r\n\t\tconst maxObj = randomPlayers.reduce((max, player) => (max?.fppg > player.fppg ? max : player), null);\r\n\r\n\t\treturn maxObj.id;\r\n\t}\r\n\r\n\tfunction handleChosenTheBest(isTheBest) {\r\n\t\tsetHasChosenTheBest(isTheBest);\r\n\t\tisTheBest && dispatch(incrementScore());\r\n\t}\r\n\r\n\tfunction handleCardClick(isTheBest) {\r\n\t\tif (!showFppg) {\r\n\t\t\tsetShowFppg(true);\r\n\t\t\thandleChosenTheBest(isTheBest);\r\n\t\t\tdispatch(incrementAttempts());\r\n\t\t} else {\r\n\t\t\thandleRandomPlayers();\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>Select how many players to show:</div>\r\n\t\t\t<PlayersRadioSelection numOfPlayers={numOfPlayers} setNumOfPlayers={setNumOfPlayers} />\r\n\t\t\t<div style={{ minHeight: '25px', fontWeight: 'lighter', padding: '5px', fontSize: '18px' }}>\r\n\t\t\t\t{showFppg && 'Click again to see next players'}\r\n\t\t\t</div>\r\n\t\t\t<CardUlListDisplay data-testid='players-list'>\r\n\t\t\t\t{randomPlayers.map(player => (\r\n\t\t\t\t\t<li key={player.id} data-testid='players-list-item'>\r\n\t\t\t\t\t\t<PlayerCard\r\n\t\t\t\t\t\t\tplayer={player}\r\n\t\t\t\t\t\t\tshowFppg={showFppg}\r\n\t\t\t\t\t\t\thandleCardClick={handleCardClick}\r\n\t\t\t\t\t\t\tmaxFppgId={getMaxFppgId}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</CardUlListDisplay>\r\n\t\t\t<h4 style={{ color: hasChosenTheBest ? 'green' : 'red', minHeight: '25px' }}>\r\n\t\t\t\t{showFppg && (hasChosenTheBest ? 'CORRECT' : 'WRONG')}\r\n\t\t\t</h4>\r\n\t\t\t<Button onClick={() => setRandomPlayers(getRandomPlayers(playersList, numOfPlayers))}>NEXT</Button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PlayersContainer;\r\n","export const WINNING_SCORE = 10;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { WINNING_SCORE } from '../../constants';\r\nimport { setWinner } from '../scoreboard/scoreboardSlice';\r\n\r\nfunction ScoreboardDetailsContainer() {\r\n\tconst dispatch = useDispatch();\r\n\tconst { score, attempts } = useSelector(state => state.scoreboard);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tscore >= WINNING_SCORE && dispatch(setWinner());\r\n\t\t},\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t[score]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div data-testid='score'>\r\n\t\t\t\tScore: {score} / {WINNING_SCORE}\r\n\t\t\t</div>\r\n\t\t\t<div data-testid='attempts'>Attempts: {attempts}</div>\r\n\t\t\t<div data-testid='accuracy'>Accuracy: {attempts > 0 && ((score / attempts) * 100).toFixed() + '%'}</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ScoreboardDetailsContainer;\r\n","import React from 'react';\r\n\r\n\r\nfunction Header() {\r\n  \r\n  return (\r\n    <h2>Guess which player has higher FanDuel Points Per Game (FPPG)</h2>\r\n  )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import './App.css';\r\nimport { fetchPlayers } from './features/players/playersSlice';\r\nimport PlayersContainer from './features/players/PlayersContainer';\r\nimport ScoreboardDetailsContainer from './features/scoreboard/ScoreboardDetailsContainer';\r\nimport Header from './components/Header';\r\nimport Button from './components/Button';\r\nimport { resetGame } from './features/scoreboard/scoreboardSlice';\r\nimport { GlobalStyle } from './style';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n\theight: 100vh;\r\n\toverflow: auto;\r\n`;\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\tconst { isWinner } = useSelector(state => state.scoreboard);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tdispatch(fetchPlayers());\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<GlobalStyle />\r\n\t\t\t{isWinner ? (\r\n\t\t\t\t<div>YOU WON</div>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<PlayersContainer />\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t<ScoreboardDetailsContainer />\r\n\t\t\t{isWinner && <Button onClick={() => dispatch(resetGame())}> Play AGAIN </Button>}\r\n\t\t</Wrapper>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport playersReducer from '../features/players/playersSlice';\r\nimport scoreboardReducer from '../features/scoreboard/scoreboardSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  players: playersReducer,\r\n  scoreboard: scoreboardReducer\r\n})\r\n\r\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst store = state =>\r\n\tconfigureStore({\r\n\t\treducer: rootReducer,\r\n\t\tpreloadedState: state,\r\n\t});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store()}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}